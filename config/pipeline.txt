####################################################################################################
# DeepStream YOLOv8 Detection Pipeline Configuration
#
# Usage: /app/deepstream_app <rtsp_in> <rtsp_out> /config/pipeline.txt
#
# This config drives the entire pipeline except the output sink (rtspclientsink),
# which is created in C++ code to push to MediaMTX relay server.
####################################################################################################

[application]
enable-perf-measurement=0
perf-measurement-interval-sec=5

[source0]
enable=1
# Type: 1=CameraV4L2 2=URI 3=MultiURI 4=RTSP
type=4
# URI will be set dynamically via command line argument
# RTSP reconnection properties handled by nvurisrcbin internally
gpu-id=0
cudadec-memtype=0

[streammux]
gpu-id=0
# Live source for RTSP input
live-source=1
batch-size=1
# 40ms timeout for smooth frame delivery (low latency)
batched-push-timeout=40000
# Native video resolution (1280x720)
width=1280
height=720
enable-padding=0
nvbuf-memory-type=0

[primary-gie]
enable=1
gpu-id=0
batch-size=1
# Inference every frame (no skipping)
interval=0
gie-unique-id=1
nvbuf-memory-type=0
# Reference external config for YOLOv8 model details
config-file=/config/pgie_yolov8_coco.txt

[tracker]
enable=1
# Tracker resolution (must be multiple of 32 for NvDCF)
tracker-width=640
tracker-height=384
ll-lib-file=/opt/nvidia/deepstream/deepstream-8.0/lib/libnvds_nvmultiobjecttracker.so
# Custom smooth tracking config
ll-config-file=/config/tracker_smooth.yml
gpu-id=0
display-tracking-id=1

[osd]
enable=1
gpu-id=0
border-width=2
text-size=12
text-color=1;1;1;1;
text-bg-color=0.3;0.3;0.3;1
font=Arial
show-clock=0
clock-x-offset=800
clock-y-offset=820
clock-text-size=12
clock-color=1;0;0;0
nvbuf-memory-type=0
# GPU mode for hardware acceleration (process-mode not in config, set in C++)
# display-text and display-bbox not in config, set in C++

[sink0]
enable=1
# Sink will be created as custom rtspclientsink in C++ code
# Type is ignored - kept for reference only
# Encoder settings below will be used by custom sink creation
type=3
# H.264 codec
codec=1
# Hardware encoder
enc-type=0
sync=0
# 2Mbps bitrate (matching input)
bitrate=2000000
# H264 Profile: 0=Baseline 2=Main 4=High
profile=0
# I-frame every 30 frames (1 second @ 30fps)
iframeinterval=30
# Slow preset for quality (0=ultrafast 1=fast 2=medium 3=slow 4=veryslow)
# Note: This maps to preset-level property in C++
# Output file path will be replaced with RTSP URL in C++
gpu-id=0

[tests]
file-loop=0
